
from enaml.widgets.api import (
    MainWindow, ToolBar, Action, ActionGroup, Container, MenuBar, Menu,
    FileDialogEx, DockPane, PushButton, RadioButton, GroupBox, ObjectCombo,
    StatusBar, StatusItem, CheckBox, Label, Field, Dialog
)

from enaml.layout.api import vbox, hbox, spacer

from enaml_zinc_widget import EZincWidget

from opencmiss.zinc.context import Context

"""
Chris Colbert:
Yeah, we're missing docs on the various operators. The short version:

    "=" - The simple assignment operator. Assigns RHS value to LHS attribute. RHS must be an expression. Lazily evaluated with no subscription behavior.
    "<<" - The subscription operator. Assigns RHS value to LHS attribute. RHS must be an expression. Lazily evaluated the first time, will re-evaluate when dependencies change.
    ">>" - The update operator. Assigns LHS attribute to RHS expression. RHS must be an lvalue expression. RHS is updated whenever LHS attribute is updated.
    ":=" - The delegation operator. A combination of the "<<" and ">>" operators.
    "::" - The notification operator. Executes RHS whenever the LHS attribute changes. RHS can be any block of Python code except for "def", "class", "yield" and "return'."""


enamldef MyMenuBar(MenuBar): mb:
    attr path : unicode = u""
    attr controller = parent.controller
    name = 'mb'
    Menu:
        title = '&File'
#         Action:
#             text = 'New File\tCtrl+N'
#             triggered :: print 'New File triggered'
        Action:
            text = 'Open File\tCtrl+O'
            triggered ::
                #print 'Open File triggered'
                path = FileDialogEx.get_open_file_name(mb.parent)
                if path:
                    controller.open_file(path)
#         Action:
#             text = 'Open Folder...'
#             triggered :: print 'Open Folder triggered'
        Action:
            text = 'Load nodes ...'
            triggered ::
                path = FileDialogEx.get_open_file_name(mb.parent)
                if path:
                    controller.load_nodes(path)
        Action:
            text = 'Load elements ...'
            triggered ::
                path = FileDialogEx.get_open_file_name(mb.parent)
                if path:
                    controller.load_elements(path)
        Action:
            text = 'Load data ...'
            triggered ::
                path = FileDialogEx.get_open_file_name(mb.parent)
                if path:
                    controller.load_data(path)
        Action:
            text = 'Save file ...'
            triggered :: 
                path = FileDialogEx.get_save_file_name(mb.parent)
                if path:
                    controller.save_file(path)
        Action:
            text = 'Quit'
            # Action:Menu:MenuBar:MainWindow
            triggered :: parent.parent.parent.close()
    Menu:
        title = '&Edit'
        Action:
            text = 'Undo\tCtrl+Z'
            name = 'undo'
            enabled = False
            triggered :: controller.undo()
        Action:
            text = 'Redo\tCtrl+R'
            name = 'redo'
            enabled = False
            triggered :: controller.redo()
#         Menu:
#             title = 'Undo Selection'
#             Action:
#                 text = 'Undo Insert\tCtrl+U'
#                 triggered :: print 'Undo Insert triggered'
#             Action:
#                 text = 'Redo Insert\tCtrl+Shift+U'
#                 enabled = False
#                 triggered :: print 'Redo Insert triggered'
#         Action:
#             separator = True
#         Action:
#             text = 'Cut\tCtrl+X'
#             triggered :: print "Cut triggered"
#         Action:
#             text = 'Copy\tCtrl+C'
#             triggered :: print 'Copy triggered'
#         Action:
#             text = 'Paste\tCtrl+V'
#             triggered :: print 'Paste triggered'
    Menu:
        title = '&View'
        Action:
            text = "View all"
            triggered :: controller.view_all() 
        Action:
            separator = True
#         ActionGroup:
        Action:
            text = 'Data'
            name = 'view_data'
            triggered :: controller.view_data(checked)
            checkable = True 
            checked = True
        Action:
            text = 'Reference'
            name = 'view_reference'
            triggered :: controller.view_reference(checked)
            checkable = True 
            checked = True
        Action:
            text = 'Fitted'
            name = 'view_fitted'
            triggered :: controller.view_fitted(checked) 
            checkable = True
            checked = True
        Action:
            text = 'Cubic data'
            name = 'cubic_data'
            triggered :: controller.view_data_cubic(checked) 
            checkable = True
            checked = True
        Action:
            text = 'Cubic reference'
            name = 'cubic_reference'
            triggered :: controller.view_reference_cubic(checked) 
            checkable = True
            checked = True
        Action:
            text = 'Cubic fitted'
            name = 'cubic_fitted'
            triggered :: controller.view_fitted_cubic(checked) 
            checkable = True
            checked = True

enamldef DataDockPane(DockPane):
    attr controller = parent.controller
    title = "Data"
    # alias statusText: statusText
    Container:
        padding = 0
#         constraints = [
#                        vbox(hbox(mirror, axis),
#                             auto,
#                             manual)
#         ]
        GroupBox:
            padding = 0
            constraints = [
                            hbox(mirror, axis),
#                             axis.width == 100
                           ]
            title = 'Data'
            PushButton: mirror:
                text = 'Mirror'
                clicked :: controller.data_mirror(axis.selected)
                hug_width = 'required'
                tool_tip = "Mirror data about its centroid"
            ObjectCombo: axis:
                items = ['x', 'y', 'z']
                hug_width = 'required'


enamldef RegistrationAutoDockPane(DockPane):
    attr controller = parent.controller
    title = "Registration"
    # alias statusText: statusText
    Container:
        padding = 0
#         constraints = [
#                        vbox(hbox(mirror, axis),
#                             auto,
#                             manual)
#         ]
#        GroupBox:
#         PushButton: 
#             text = 'Host mesh registration'
#             clicked ::
#                 d = HMFDialog(self.parent)
#                 d.show()
            
        GroupBox:
            title = 'Automatic'
            CheckBox: translate:
                text = "translate"
                checked = True
            CheckBox: rotate:
                text = "rotate"
                checked = True
            CheckBox: scale:
                text = "scale"
                checked = True
                # FIXME: add seperate scaling for each axis (use radio buttons to select single or axiswise scaling)
            PushButton: auto:
                text = 'Register'
                clicked ::
                    #selectPoints.checked = False
                    controller.register_automatic(translate.checked, rotate.checked, scale.checked)


enamldef RegistrationHostMeshDockPane(DockPane):
    attr controller = parent.controller
    title = 'Host mesh registration'
    GroupBox:
        constraints = [
                        vbox(#selectPoints,
                             hbox(lblDisp, displacement_penalty),
                             manual),
                       displacement_penalty.width == 50
                        ]
        padding = 0
        title = "Manual- HMF"
        #flat = True
#             GroupBox: ag:
#                 # How do I provide some affordance about this. E.g how many points to select
#                 RadioButton: sel_data:
#                     text = "Sel data"
#                     clicked :: controller.select_data(additive=False)
#                 RadioButton: sel_nodes:
#                     text = "Sel nodes"
#                     clicked :: controller.select_nodes(additive=False)
#         PushButton: selectPoints:
#             text = 'Select points'
#             checkable = True
#             checked = False
#                    statusText.text = "Select a node"
#             Label: statusText:
#                 # the main status bar observes this
#                 visible = False
#                 name = 'status'
        Label: lblDisp:
            text = 'Disp. penalty'
        Field: displacement_penalty:
            #mask = '0'
            placeholder = '0'
        PushButton: manual:
            text = 'Register'
            name = 'register_manual'
            enabled = False
            clicked ::
                controller.register_manual(displacement_penalty.field_text())
                #selectPoints.checked = False


enamldef FitDockPane(DockPane):
    title = "Fit"
    Container:
        GroupBox:
            RadioButton:
                checkable = True
                text = 'Select data'
                clicked :: controller.select_data(additive=True)
            RadioButton:
                checkable = True
                text = 'Select faces'
                clicked :: controller.select_faces()
            RadioButton:
                checkable = True
                text = 'Select nodes'
                clicked :: controller.select_nodes(additive=True)
        GroupBox:
            PushButton:
    #             Action:
    #                 checkable = True
                    text = 'Convert to cubic'
                    clicked :: controller.convert_to_cubic()
                    tool_tip = "Convert the mesh to cubic Lagrange"
            PushButton:
    #             Action:
    #                 checkable = True
                    text = 'Project'
                    clicked :: controller.project()
                    tool_tip = "Project the selected data onto the selected faces"
            GroupBox:
                constraints = [
                               vbox(
                                hbox(lblarclen, arclen),
                                hbox(lblcurvature, curvature)),
                               arclen.width == 50,
                               curvature.width == arclen.width
                               ]
                title = 'Smoothing'
                Label: lblarclen:
                    text = 'Arc length'
                Field: arclen:
                    #mask = '0'
                    placeholder = '0'
                Label: lblcurvature:
                    text = 'Curvature'
                Field: curvature:
                    placeholder = '0'
                    #mask = '0'
            PushButton:
    #             Action:
    #                 checkable = True
                    text = 'Fit'
                    clicked :: controller.fit(arclen.field_text(), curvature.field_text())
                    tool_tip = "Fit the selected faces to the selected data"


enamldef MyToolBar(ToolBar):
    attr controller = parent.controller
    alias ag: ag
    ActionGroup: ag:
        alias data_tools
        Action: data_tools:
            checkable = True
            text = 'Data'
            tool_tip = "Data manipulation"
        
        alias auto_registration
        Action: auto_registration:
            checkable = True
            text = 'Reg'
            tool_tip = "Automatic registration"
        
        alias hmf_registration
        Action: hmf_registration:
            checkable = True
            text = 'HMR'
            tool_tip = "Host mesh registration"
            triggered ::
                print "hmf_registration triggered", self.triggered
            toggled ::
                if checked:
                    controller.select_manual_reg()
                else:
                    controller.select_no_mode()

        alias fit
        Action: fit:
            checkable = True
            text = 'Fit'
            tool_tip = "Fitting"
#             triggered :: controller.on_select_data()
#         Action:
#             checkable = True
#             text = 'Sel faces'
#             triggered :: controller.on_select_faces()
        Action:
            separator = True
    Action:
        text = 'View all'
        triggered :: controller.view_all()


enamldef MyStatusBar(StatusBar):
    alias statusLabel: statusLabel
    StatusItem:
        Label: statusLabel:
            text = "Select a tool"
            name = 'status'


enamldef Main(MainWindow): main:
    title = 'Zinc Widget'
    initial_size = (800,600)
    attr controller
    MyMenuBar:
        pass
    MyStatusBar: sb:
        #statusLabel.text << reg_man_pane.statusText.text
        pass
    MyToolBar: tb:
        pass
#     Conditional:
#         condition << bool(tb.data_toolbox)
    DataDockPane: data_pane:
        floating = False
        visible := tb.ag.data_tools.checked

    RegistrationAutoDockPane: reg_man_pane:
        floating = False
        visible := tb.ag.auto_registration.checked
        closed ::
            controller.select_no_mode()
            sb.statusLabel.text = "Select a tool"
                
    RegistrationHostMeshDockPane: reg_hmf_pane:
        floating = False
        visible := tb.ag.hmf_registration.checked
        closed ::
            controller.select_no_mode()
            sb.statusLabel.text = "Select a tool"
                
#     RegistrationAutoDockPane: reg_auto_pane:
#         floating = False
#         visible << tb.ag.auto_registration.checked
    FitDockPane: fit_pane:
        floating = False
        visible << tb.ag.fit.checked
    Container:
        padding = 0
 
        EZincWidget:
            name = "ZincWidget"
            context = Context("Fitter")
            # need to create an event that gets called when it is created

    closed :: controller.on_closed()
